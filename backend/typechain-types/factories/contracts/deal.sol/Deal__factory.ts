/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Deal, DealInterface } from "../../../contracts/deal.sol/Deal";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_seller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approval",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nftID",
        type: "uint256",
      },
    ],
    name: "approveSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "buyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nftID",
        type: "uint256",
      },
    ],
    name: "cancelSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nftID",
        type: "uint256",
      },
    ],
    name: "depositEarnest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nftID",
        type: "uint256",
      },
    ],
    name: "finalizeSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "isListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nftID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_purchasePrice",
        type: "uint256",
      },
    ],
    name: "list",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "purchasePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "seller",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610fbd380380610fbd8339818101604052810190610032919061015b565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061019b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b6000610128826100bf565b9050919050565b6101388161011d565b811461014357600080fd5b50565b6000815190506101558161012f565b92915050565b60008060408385031215610172576101716100ba565b5b600061018085828601610108565b925050602061019185828601610146565b9150509250929050565b610e13806101aa6000396000f3fe6080604052600436106100ab5760003560e01c806377fbc4ae1161006457806377fbc4ae146101ba578063aa929380146101f7578063b848de3514610220578063bd94b0051461025d578063e740f77014610286578063fcce4883146102a2576100b2565b806308551a53146100b757806312065fe0146100e257806314a72feb1461010d57806328f251b3146101365780634dd4acaf146101525780635bf8633a1461018f576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100cc6102df565b6040516100d99190610a99565b60405180910390f35b3480156100ee57600080fd5b506100f7610305565b6040516101049190610acd565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610b19565b61030d565b005b610150600480360381019061014b9190610b84565b610379565b005b34801561015e57600080fd5b5061017960048036038101906101749190610b19565b610533565b6040516101869190610be6565b60405180910390f35b34801561019b57600080fd5b506101a4610566565b6040516101b19190610be6565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc9190610b19565b61058a565b6040516101ee9190610acd565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190610b19565b6105a2565b005b34801561022c57600080fd5b5061024760048036038101906102429190610c01565b610882565b6040516102549190610c5c565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190610b19565b6108b1565b005b6102a0600480360381019061029b9190610b19565b610972565b005b3480156102ae57600080fd5b506102c960048036038101906102c49190610b19565b610a38565b6040516102d69190610c5c565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600047905090565b60016005600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040090610cd4565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161046693929190610cf4565b600060405180830381600087803b15801561048057600080fd5b505af1158015610494573d6000803e3d6000fd5b5050505060016002600085815260200190815260200160002060006101000a81548160ff021916908315150217905550806003600085815260200190815260200160002081905550816004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b6005600082815260200190815260200160002060006004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661063c57600080fd5b600560008281526020019081526020016000206000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106c557600080fd5b60036000828152602001908152602001600020544710156106e557600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360008481526020019081526020016000205460405161074090610d5c565b60006040518083038185875af1925050503d806000811461077d576040519150601f19603f3d011682016040523d82523d6000602084013e610782565b606091505b505090508061079057600080fd5b60006002600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd306004600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b815260040161084c93929190610cf4565b600060405180830381600087803b15801561086657600080fd5b505af115801561087a573d6000803e3d6000fd5b505050505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60016002600083815260200190815260200160002060006101000a81548160ff02191690831515021790551561096f576004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60036000848152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561096d573d6000803e3d6000fd5b505b50565b806004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b90610dbd565b60405180910390fd5b6003600083815260200190815260200160002054341015610a3457600080fd5b5050565b60026020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8382610a58565b9050919050565b610a9381610a78565b82525050565b6000602082019050610aae6000830184610a8a565b92915050565b6000819050919050565b610ac781610ab4565b82525050565b6000602082019050610ae26000830184610abe565b92915050565b600080fd5b610af681610ab4565b8114610b0157600080fd5b50565b600081359050610b1381610aed565b92915050565b600060208284031215610b2f57610b2e610ae8565b5b6000610b3d84828501610b04565b91505092915050565b6000610b5182610a58565b9050919050565b610b6181610b46565b8114610b6c57600080fd5b50565b600081359050610b7e81610b58565b92915050565b600080600060608486031215610b9d57610b9c610ae8565b5b6000610bab86828701610b04565b9350506020610bbc86828701610b6f565b9250506040610bcd86828701610b04565b9150509250925092565b610be081610b46565b82525050565b6000602082019050610bfb6000830184610bd7565b92915050565b60008060408385031215610c1857610c17610ae8565b5b6000610c2685828601610b04565b9250506020610c3785828601610b6f565b9150509250929050565b60008115159050919050565b610c5681610c41565b82525050565b6000602082019050610c716000830184610c4d565b92915050565b600082825260208201905092915050565b7f4f6e6c792073656c6c65722063616e2063616c6c2074686973206d6574686f64600082015250565b6000610cbe602083610c77565b9150610cc982610c88565b602082019050919050565b60006020820190508181036000830152610ced81610cb1565b9050919050565b6000606082019050610d096000830186610bd7565b610d166020830185610bd7565b610d236040830184610abe565b949350505050565b600081905092915050565b50565b6000610d46600083610d2b565b9150610d5182610d36565b600082019050919050565b6000610d6782610d39565b9150819050919050565b7f4f6e6c792062757965722063616e2063616c6c2074686973206d6574686f6400600082015250565b6000610da7601f83610c77565b9150610db282610d71565b602082019050919050565b60006020820190508181036000830152610dd681610d9a565b905091905056fea2646970667358221220f1e82bb7098336587f31b7e414abc3297a83a0406be0aee300de350fd33f694f64736f6c634300081c0033";

type DealConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DealConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Deal__factory extends ContractFactory {
  constructor(...args: DealConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _nftAddress: AddressLike,
    _seller: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_nftAddress, _seller, overrides || {});
  }
  override deploy(
    _nftAddress: AddressLike,
    _seller: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_nftAddress, _seller, overrides || {}) as Promise<
      Deal & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Deal__factory {
    return super.connect(runner) as Deal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DealInterface {
    return new Interface(_abi) as DealInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Deal {
    return new Contract(address, _abi, runner) as unknown as Deal;
  }
}
